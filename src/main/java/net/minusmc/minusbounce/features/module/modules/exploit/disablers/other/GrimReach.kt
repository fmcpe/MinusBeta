package net.minusmc.minusbounce.features.module.modules.exploit.disablers.other

import net.minecraft.network.Packet
import net.minecraft.network.play.client.C02PacketUseEntity
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.event.PreMotionEvent
import net.minusmc.minusbounce.event.StrafeEvent
import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.utils.PacketUtils

class GrimReach : DisablerMode("GrimReach") {
    private var ticksSinceAttacks = 0
    private var ticks = 0
    private var attacked = 0
    private val packets = mutableListOf<Packet<*>>()

    override fun onEnable() {
        ticks = 0
    }

    override fun onPreMotion(event: PreMotionEvent) {
        ticksSinceAttacks++
        if (ticks > 0) ticks--

        if (attacked >= 9) {
            ticksSinceAttacks = 10
            ticks = 0
            attacked = 0
        }
    }

    override fun onDisable() {
        packets.forEach(PacketUtils::sendPacketNoEvent)
        packets.clear()
    }

    override fun onStrafe(event: StrafeEvent) {
        if (ticksSinceAttacks < 8) {
            event.isCancelled = true
            mc.thePlayer.setVelocity(0.0, 0.0, 0.0)
        }
    }

    override fun onPacket(event: PacketEvent) {

        if (mc.thePlayer == null) {
            packets.clear()
            return
        }

        when (val packet = event.packet) {
            is C02PacketUseEntity -> {
                if (ticksSinceAttacks > 8) ticksSinceAttacks = 0

                if (ticks <= 0) ticks = 6
                attacked++
            }

            is C03PacketPlayer -> {
                if (ticksSinceAttacks < 8) {
                    event.isCancelled = true
                }
            }

            is C0FPacketConfirmTransaction -> {
                if (ticks > 0) {
                    packets.add(packet)
                    event.isCancelled = true
                    ticks--
                } else {
                    if (packets.isNotEmpty()) {
                        packets.forEach(PacketUtils::sendPacketNoEvent)
                        packets.clear()
                    }
                }
            }
        }
    }
}